	http.HandleFunc("/createOrder", restapi.CreateOrder(inputPort))
  
  if err := http.ListenAndServe(":8080", nil); err != nil {
		panic(err)
	}


func CreateOrder(inputPort inport.CreateOrder) http.HandlerFunc {

	type createOrderRequest struct {
	}

	return func(w http.ResponseWriter, r *http.Request) {

		// receive json
		var jsonReq createOrderRequest

		if err := json.NewDecoder(r.Body).Decode(&jsonReq); err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusBadRequest)
			bytes, _ := json.Marshal(err.Error())
			w.Write([]byte(bytes))

			log.Print("CreateOrder Error")
			return
		}

		// convert to request
		var req inport.CreateOrderRequest
		if err := copier.Copy(&req, jsonReq); err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusBadRequest)
			bytes, _ := json.Marshal(err.Error())
			w.Write([]byte(bytes))
			return
		}

		// run the usecase
		res, err := inputPort.Handle(context.Background(), req)
		if err != nil {
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusBadRequest)
			bytes, _ := json.Marshal(err.Error())
			w.Write([]byte(bytes))
			return
		}

		log.Print("CreateOrder")

		// return the response
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		bytes, err := json.Marshal(res)
		w.Write([]byte(bytes))

	}
}  