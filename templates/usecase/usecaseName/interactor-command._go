package {{LowerCase .Name}}

import (
	"context"

	"{{.PackagePath}}{{.Directory}}/usecase/{{LowerCase .Name}}/port"
)

//go:generate mockery --dir port/ --name {{PascalCase .Name}}Outport -output mocks/

// New{{PascalCase .Name}}Usecase ...
func New{{PascalCase .Name}}Usecase(outputPort port.{{PascalCase .Name}}Outport) port.{{PascalCase .Name}}Inport {
	return &{{CamelCase .Name}}Interactor{
		datasource: outputPort,
	}
}

type {{CamelCase .Name}}Interactor struct {
	datasource port.{{PascalCase .Name}}Outport
}

// Handle ...
func (_r *{{CamelCase .Name}}Interactor) HandleCommand(ctx context.Context, req port.{{PascalCase .Name}}Request) (*port.{{PascalCase .Name}}Response, error) {
	
	// TODO validate {{PascalCase .Name}} request {{range .InportRequestFields}}
	_ = req.{{.Name}} // helper field{{end}}

	var res port.{{PascalCase .Name}}Response {{range .InportResponseFields}}
	// res.{{.Name}} = ... // helper field {{end}}
	{{range .Outports}}
	{
		resOutport, err := _r.datasource.{{PascalCase .Name}}(ctx, port.{{PascalCase .Name}}Request{ // {{range .RequestFields}}
			// {{PascalCase .Name}}: ...,{{end}}
		})

		if err != nil {
			return nil, err
		}
		{{if gt (len .ResponseFields) 0}} {{range .ResponseFields}}
		_ = resOutport.{{PascalCase .Name}} // helper field {{end}} {{else}}
		_ = resOutport {{end}}
	} {{end}}

	return &res, nil
}