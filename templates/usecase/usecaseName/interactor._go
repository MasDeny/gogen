package {{LowerCase .UsecaseName}}

import (
	"context"

	"{{.PackagePath}}/usecase/{{LowerCase .UsecaseName}}/port"
)

//go:generate mockery --dir port/ --name {{PascalCase .UsecaseName}}Outport -output mocks/

// New{{PascalCase .UsecaseName}}Usecase ...
func New{{PascalCase .UsecaseName}}Usecase(outputPort port.{{PascalCase .UsecaseName}}Outport) port.{{PascalCase .UsecaseName}}Inport {
	return &{{CamelCase .UsecaseName}}Interactor{
		datasource: outputPort,
	}
}

type {{CamelCase .UsecaseName}}Interactor struct {
	datasource port.{{PascalCase .UsecaseName}}Outport
}

// Handle ...
func (_r *{{CamelCase .UsecaseName}}Interactor) Handle(ctx context.Context, req port.{{PascalCase .UsecaseName}}Request) (*port.{{PascalCase .UsecaseName}}Response, error) { {{if gt (len .Inport.RequestFields) 0}} 
	{{range .Inport.RequestFields}}
	_ = req.{{.FieldName}} {{end}} {{end}}

	var res port.{{PascalCase .UsecaseName}}Response {{range .Inport.ResponseFields}}
	// res.{{.FieldName}} = ...  {{end}} {{range .Outport}}
	
	{
		resOutport, err := _r.datasource.{{PascalCase .MethodName}}(ctx, port.{{PascalCase .ParamType}} { // {{range .RequestFields}}
			// {{PascalCase .FieldName}}: ...,  {{end}}
		})

		if err != nil {
			return nil, err
		}
		{{if gt (len .ResponseFields) 0}} {{range .ResponseFields}}
		_ = resOutport.{{PascalCase .FieldName}}  {{end}} {{else}}
		_ = resOutport {{end}}
	} {{end}}

	return &res, nil
}