package {{LowerCase .ControllerName}}

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	"{{.PackagePath}}/usecase/{{LowerCase .UsecaseName}}/port"
)

// {{PascalCase .UsecaseName}} ...
func {{PascalCase .UsecaseName}}Handler(inputPort port.{{PascalCase .UsecaseName}}Inport) http.HandlerFunc {

	return func(w http.ResponseWriter, r *http.Request) {

		bytes, _ := ioutil.ReadAll(r.Body)

		log.Printf("Controller Handler Request {{PascalCase .UsecaseName}}Handler  %v", string(bytes))

		var req port.{{PascalCase .UsecaseName}}Request

		if err := json.Unmarshal(bytes, &req); err != nil {
			log.Printf("Controller Handler Response {{PascalCase .UsecaseName}}Handler %v", err.Error())
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		res, err := inputPort.Execute(context.Background(), req)
		if err != nil {
			log.Printf("Controller Handler Response CreateOrderHandler %v", err.Error())
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		jsonRes, _ := json.Marshal(res)
		fmt.Fprint(w, string(jsonRes))

		log.Printf("Controller Handler Response {{PascalCase .UsecaseName}}Handler %v", string(jsonRes))

	}
}
