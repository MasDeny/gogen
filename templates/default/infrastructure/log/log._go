package log

import (
	"context"
	"fmt"
	"log"
	"runtime"
	"strings"

	"github.com/segmentio/ksuid"
)

type operationIDType string

const operationIDConst = "opid"
const operationIDField operationIDType = operationIDConst

func ContextWithOperationID(ctx context.Context) context.Context {
	rpcIDInterface := ctx.Value(operationIDField)
	if rpcIDInterface == nil {
		id := ksuid.New().String()
		return context.WithValue(ctx, operationIDField, id)
	}

	return ctx
}

func Info(ctx context.Context, message string, args ...interface{}) {
	log.Printf(composeAdditionalInfo(ctx, "INFO")+message, args...)
}

func Error(ctx context.Context, message string, args ...interface{}) {
	log.Printf(composeAdditionalInfo(ctx, "ERRO")+message, args...)
}

func InfoRequest(ctx context.Context, dataRequest interface{}) {
	log.Print(composeAdditionalInfo(ctx, "INFO") + fmt.Sprintf("REQUEST  %s", dataRequest))
}

func InfoResponse(ctx context.Context, dataResponse interface{}) {
	log.Print(composeAdditionalInfo(ctx, "INFO") + fmt.Sprintf("RESPONSE %s", dataResponse))
}

func ErrorRequest(ctx context.Context, err error) {
	log.Print(composeAdditionalInfo(ctx, "ERRO") + fmt.Sprintf("REQUEST  %s", err.Error()))
}

func ErrorResponse(ctx context.Context, err error) {
	log.Print(composeAdditionalInfo(ctx, "ERRO") + fmt.Sprintf("RESPONSE %s", err.Error()))
}

func composeAdditionalInfo(ctx context.Context, logLevel string) string {
	return fmt.Sprintf("[%s] %s %s ", logLevel, getOperationID(ctx), getFunctionCall(3))
}

func getOperationID(ctx context.Context) string {

	opidInterface := ctx.Value(operationIDField)
	if opidInterface == nil {
		return "-"
	}

	rpcid, ok := opidInterface.(string)
	if !ok {
		return "-"
	}

	return rpcid
}

func getFunctionCall(functionLevel int) string {
	pc, _, line, ok := runtime.Caller(functionLevel)
	if !ok {
		return ""
	}
	funcName := runtime.FuncForPC(pc).Name()
	x := strings.LastIndex(funcName, "/")
	return fmt.Sprintf("%s:%d", funcName[x+1:], line)
}
