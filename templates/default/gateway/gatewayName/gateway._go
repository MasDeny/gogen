package {{LowerCase .GatewayName}}

import (
	"context"

	"{{.PackagePath}}/infrastructure/log"
	"{{.PackagePath}}/infrastructure/util"
	"{{.PackagePath}}/usecase/{{LowerCase .UsecaseName}}/port"
)

type {{CamelCase .UsecaseName}} struct {
}

// New{{PascalCase .UsecaseName}}Gateway ...
func New{{PascalCase .UsecaseName}}Gateway() port.{{PascalCase .UsecaseName}}Outport {
	return &{{CamelCase .UsecaseName}}{}
}
{{range .Outport}}
// {{PascalCase .MethodName}} ...
func (r *{{CamelCase $.UsecaseName}}) {{PascalCase .MethodName}}(ctx context.Context, req port.{{PascalCase .ParamType}}) (*port.{{PascalCase .ResultType}}, error) {
	log.Info(ctx, "Request  %v", util.MustJSON(req)) {{range .RequestFields}}
	// _ = req.{{PascalCase .FieldName}} {{end}}

	var res port.{{PascalCase .ResultType}} {{range .ResponseFields}}
	// res.{{PascalCase .FieldName}} = ... {{end}}
	
	log.Info(ctx, "Response %v", util.MustJSON(res))
	return &res, nil
} 
{{end}}

