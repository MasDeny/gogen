package vo

import (
	"strings"

	"{{.PackagePath}}/application/apperror"
)

type {{PascalCase .EnumName}} string

const ( {{range .EnumValues}}
	{{PascalCase .}}{{PascalCase $.EnumName}}Enum {{PascalCase $.EnumName}} = "{{UpperCase .}}" {{end}}
)

var enum{{PascalCase .EnumName}} = map[{{PascalCase .EnumName}}]{{PascalCase .EnumName}}Detail{ {{range .EnumValues}}
	{{PascalCase .}}{{PascalCase $.EnumName}}Enum : {}, {{end}}
}

type {{PascalCase .EnumName}}Detail struct { //
}

func New{{PascalCase .EnumName}}(name string) ({{PascalCase .EnumName}}, error) {
	name = strings.ToUpper(name)

	if _, exist := enum{{PascalCase .EnumName}}[{{PascalCase .EnumName}}(name)]; !exist {
		return "", apperror.UnrecognizedEnum.Var(name, "{{PascalCase .EnumName}}")
	}

	return {{PascalCase .EnumName}}(name), nil
}

func (r {{PascalCase .EnumName}}) GetDetail() {{PascalCase .EnumName}}Detail {
	return enum{{PascalCase .EnumName}}[r]
}

func (r {{PascalCase .EnumName}}) PossibleValues() []{{PascalCase .EnumName}} {
	res := []{{PascalCase .EnumName}}{}
	for key, _ := range enum{{PascalCase .EnumName}} {
		res = append(res, key)
	}
	return res
}