package entity

import (
	"{{.PackagePath}}/shared/errcat"
)

type {{PascalCase .StateName}} string

const ( {{range .StateValues}}
	{{PascalCase .}}{{PascalCase $.StateName}}State = {{PascalCase $.StateName}}("{{UpperCase .}}") {{end}}
)

type {{PascalCase .StateName}}Detail struct {
	State {{PascalCase .StateName}}
}

type validateTransitionRequest struct {
	DestinationState {{PascalCase .StateName}}Detail
}

type validateTransition func(toStatus validateTransitionRequest) bool

var stateRule = map[{{PascalCase .StateName}}]validateTransition{
	{{range .StateValues}}
	{{PascalCase .}}{{PascalCase $.StateName}}State: func(req validateTransitionRequest) bool {
		return false
	}, {{end}}
}

func (r {{PascalCase .StateName}}) ValidateNext{{PascalCase .StateName}}(newState {{PascalCase .StateName}}Detail) error {

	validateFunc := stateRule[r]

	isAllowed := validateFunc(validateTransitionRequest{
		DestinationState: newState,
	})

	if !isAllowed {
		return errcat.NotAllowedStateTransitionError.Var("{{PascalCase .StateName}}", r, newState.State)
	}

	return nil
}
