package entity

const ( {{range .StateValues}}
	{{PascalCase .}}{{PascalCase .StateName}}State = {{PascalCase .StateName}}Enum("UpperCase .") {{end}}
)

type {{PascalCase .StateName}}State string

type {{PascalCase .StateName}} struct {
	State {{PascalCase .StateName}}State
}

type validateTransitionRequest struct {
	ToStatus {{PascalCase .StateName}}State
}

type validateTransition func(toStatus validateTransitionRequest) bool

var stateRule = map[{{PascalCase .StateName}}Enum]validateTransition{
	{{range .StateValues}}
	{{PascalCase .}}{{PascalCase .StateName}}: func(req validateTransitionRequest) bool {
		return false
	}, {{end}}
}

func (r {{PascalCase .StateName}}) ValidateNext{{PascalCase .StateName}}(new{{PascalCase .StateName}} {{PascalCase .StateName}}Request) error {

	validateFunc := stateRule[r.Status]

	isAllowed := validateFunc(validateTransitionRequest{
		ToStatus: new{{PascalCase .StateName}}.NewStatus,
	})

	if !isAllowed {
		return shared.NotAllowedStateTransitionError.Var({{PascalCase .StateName}}, r, new{{PascalCase .StateName}}.NewStatus)
	}

	return nil
}

type {{PascalCase .StateName}}Request struct {
	NewStatus {{PascalCase .StateName}}Enum
}
