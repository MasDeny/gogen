package entity

import (
	"{{.PackagePath}}/shared/errcat"
)

type {{PascalCase .StateName}} string

const ( {{range .StateValues}}
	{{PascalCase .}}{{PascalCase $.StateName}}State = {{PascalCase $.StateName}}("{{UpperCase .}}") {{end}}
)

type {{PascalCase .StateName}}Detail struct {
	State {{PascalCase .StateName}}
}

type validateTransition{{PascalCase .StateName}}Request struct {
	DestinationState {{PascalCase .StateName}}Detail
}

type validateTransition{{PascalCase .StateName}} func(toStatus validateTransition{{PascalCase .StateName}}Request) bool

var stateRule{{PascalCase .StateName}} = map[{{PascalCase .StateName}}]validateTransition{{PascalCase .StateName}}{
	{{range .StateValues}}
	{{PascalCase .}}{{PascalCase $.StateName}}State: func(req validateTransition{{PascalCase $.StateName}}Request) bool {
		return false
	},
	{{end}}
}

func (r {{PascalCase .StateName}}) ValidateNext{{PascalCase .StateName}}(newState {{PascalCase .StateName}}Detail) error {

	validateFunc := stateRule{{PascalCase .StateName}}[r]

	isAllowed := validateFunc(validateTransition{{PascalCase .StateName}}Request{
		DestinationState: newState,
	})

	if !isAllowed {
		return errcat.NotAllowedStateTransitionError.Var("{{PascalCase .StateName}}", r, newState.State)
	}

	return nil
}
