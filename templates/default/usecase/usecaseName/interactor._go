package {{LowerCase .UsecaseName}}

import (
	"context"

	"{{.PackagePath}}/usecase/{{LowerCase .UsecaseName}}/port"
)

//go:generate mockery --dir port/ --name {{PascalCase .UsecaseName}}Outport -output mocks/

type {{CamelCase .UsecaseName}}Interactor struct {
	outport port.{{PascalCase .UsecaseName}}Outport
}

// New{{PascalCase .UsecaseName}}Usecase ...
func New{{PascalCase .UsecaseName}}Usecase(outputPort port.{{PascalCase .UsecaseName}}Outport) port.{{PascalCase .UsecaseName}}Inport {
	return &{{CamelCase .UsecaseName}}Interactor{
		outport: outputPort,
	}
}

// Execute ...
func (r *{{CamelCase .UsecaseName}}Interactor) Execute(ctx context.Context, req port.{{PascalCase .UsecaseName}}Request) (*port.{{PascalCase .UsecaseName}}Response, error) {

    res := &port.{{PascalCase .UsecaseName}}Response{}
    {{range .Outport}}
    res{{PascalCase .MethodName}}, err := r.outport.{{PascalCase .MethodName}}(ctx, port.{{PascalCase .ParamType}} {})
    if err != nil {
        return nil, err
    }
    _ = res{{PascalCase .MethodName}}
    {{end}}
    return res, nil
}