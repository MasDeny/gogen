package usecase

import "context"

type Inport[CONTEXT, REQUEST, RESPONSE any] interface {
	Execute(ctx CONTEXT, req REQUEST) (*RESPONSE, error)
}

type Inport2 interface {
	Execute(ctx context.Context, req any) (any, error)
	UsecaseName() string
}

type NameUsecase struct {
	Name string
}

func (r NameUsecase) UsecaseName() string { return r.Name }

type Container struct {
	inportObj map[string]Inport2
}

func (r Container) GetUsecase(name string) Inport2 {
	uc, exist := r.inportObj[name]
	if !exist {
		panic("usecase not found")
	}
	return uc
}

func Register(listOfUsecase ...Inport2) Container {
	res := Container{
		inportObj: map[string]Inport2{},
	}

	for _, x := range listOfUsecase {
		res.inportObj[x.UsecaseName()] = x
	}

	return res
}