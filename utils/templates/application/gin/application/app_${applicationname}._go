package application

import (
  "{{.PackagePath}}/domain_{{.DomainName}}/controller/{{LowerCase .ControllerName}}"
  "{{.PackagePath}}/domain_{{.DomainName}}/gateway/{{LowerCase .GatewayName}}" {{range .UsecaseNames}}
  "{{$.PackagePath}}/domain_{{$.DomainName}}/usecase/{{LowerCase .}}" {{end}}
  "{{.PackagePath}}/shared/gogen"
  "{{.PackagePath}}/shared/infrastructure/config"
  "{{.PackagePath}}/shared/infrastructure/server"
  "{{.PackagePath}}/shared/infrastructure/logger"
  "{{.PackagePath}}/shared/infrastructure/token"
)

type {{CamelCase .ApplicationName}} struct {}

func New{{PascalCase .ApplicationName}}() gogen.Runner {
	return &{{CamelCase .ApplicationName}}{}
}

func ({{CamelCase .ApplicationName}}) Run() error {

	const appName = "{{CamelCase .ApplicationName}}"

	cfg := config.ReadConfig()

	appData := gogen.NewApplicationData(appName)

	log := logger.NewSimpleJSONLogger(appData)

	jwtToken := token.NewJWTToken(cfg.JWTSecretKey)

	datasource := {{LowerCase .GatewayName}}.NewGateway(log, appData, cfg)

    httpHandler := server.NewGinHTTPHandler(log, cfg.Servers[appName].Address, appData)

	{{LowerCase .ControllerName}}.NewGinController(log, cfg, jwtToken).
		RegisterRouter(httpHandler.Router).
		AddUsecase(
        // {{range .UsecaseNames}}
           {{LowerCase .}}.NewUsecase(datasource), {{end}}
		)

	httpHandler.RunWithGracefullyShutdown()

	return nil
}
