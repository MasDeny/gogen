package {{LowerCase .EntityName}}update

import (
	"context"
	"{{.PackagePath}}/domain/entity"
	"{{.PackagePath}}/domain/service"
)

//go:generate mockery --name Outport -output mocks/

type {{LowerCase .EntityName}}UpdateInteractor struct {
	outport Outport
}

// NewUsecase is constructor for create default implementation of usecase
func NewUsecase(outputPort Outport) Inport {
	return &{{LowerCase .EntityName}}UpdateInteractor{
		outport: outputPort,
	}
}

// Execute the usecase
func (r *{{LowerCase .EntityName}}UpdateInteractor) Execute(ctx context.Context, req InportRequest) (*InportResponse, error) {

	res := &InportResponse{}

	err := service.WithTransaction(ctx, r.outport, func(ctx context.Context) error {

		err := r.outport.UpdateName{{PascalCase .EntityName}}(ctx, req.ID, func(obj *entity.{{PascalCase .EntityName}}) error {

			obj.Name = req.Name
			obj.Date = req.Date

			err := obj.Validate()
			if err != nil {
				return err
			}

			return nil
		})

		if err != nil {
			return err
		}

		return nil
	})

	if err != nil {
		return nil, err
	}

	return res, nil
}
