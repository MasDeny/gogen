package localdb

import (
	"context"
	"fmt"
	gonanoid "github.com/matoous/go-nanoid/v2"
	"{{.PackagePath}}/model/entity"
	"{{.PackagePath}}/model/repository"
	"{{.PackagePath}}/model/vo"
	"{{.PackagePath}}/infrastructure/database"
	"{{.PackagePath}}/infrastructure/log"
	"{{.PackagePath}}/infrastructure/util"
)

type gateway struct {
	*database.GormWithTransactionImpl
}

// NewGateway ...
func NewGateway() *gateway {

	db := database.NewSQLiteDefault()

	err := db.AutoMigrate(&{{PascalCase .EntityName}}{})
	if err != nil {
		panic(err.Error())
	}

	return &gateway{
		GormWithTransactionImpl:    database.NewGormWithTransactionImpl(db),
	}
}

func (r gateway) GenerateID(ctx context.Context) string {
	log.Info(ctx, "called")

	id, err := gonanoid.Generate("ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890", 4)
	if err != nil {
		return "abcd"
	}

	return id
}

func (r gateway) Save{{PascalCase .EntityName}}(ctx context.Context, obj *entity.{{PascalCase .EntityName}}) error {
	log.Info(ctx, "called")

	db, err := database.ExtractDB(ctx)
	if err != nil {
		return err
	}

	sm := {{PascalCase .EntityName}}{
		ID:   obj.ID.String(),
		Name: obj.Name,
	}

	err = db.Debug().Save(&sm).Error
	if err != nil {
		return err
	}

	obj.ID = vo.{{PascalCase .EntityName}}ID(sm.ID)

	return nil
}