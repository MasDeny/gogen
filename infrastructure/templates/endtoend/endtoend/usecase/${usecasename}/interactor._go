{{LowerCase .UsecaseName}}

import (
	"context"
	"{{.PackagePath}}/domain/entity"
	"{{.PackagePath}}/domain/service"
)

//go:generate mockery --name Outport -output mocks/

type {{PascalCase .UsecaseName}}Interactor struct {
	outport Outport
}

// NewUsecase is constructor for create default implementation of usecase
func NewUsecase(outputPort Outport) Inport {
	return &{{PascalCase .UsecaseName}}Interactor{
		outport: outputPort,
	}
}

// Execute the usecase
func (r *{{PascalCase .UsecaseName}}Interactor) Execute(ctx context.Context, req InportRequest) (*InportResponse, error) {

	res := &InportResponse{}

	err := service.WithTransaction(ctx, r.outport, func(ctx context.Context) error {

		randomID := r.outport.GenerateID(ctx)

		{{LowerCase .EntityName}}Obj, err := entity.New{{PascalCase .EntityName}}(entity.{{PascalCase .EntityName}}Request{
			RandomID: randomID,
			Name:     req.Name,
			Now:      req.Now,
		})
		if err != nil {
			return err
		}

		err = r.outport.Save{{PascalCase .EntityName}}(ctx, {{LowerCase .EntityName}}Obj)
		if err != nil {
			return err
		}

		res.{{PascalCase .EntityName}}ID = {{LowerCase .EntityName}}Obj.ID.String()

		return nil
	})
	if err != nil {
		return nil, err
	}

	return res, nil
}
